apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.example.there.convertermvi"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        // testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        testInstrumentationRunner "com.example.there.convertermvi.presentation.converter.ConverterTestRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            // Minifying the variant used for tests is not supported when using Jack.
            minifyEnabled false
            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {}
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    lintOptions {
        warning 'InvalidPackage' // prevent error from references of non-Android package
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    // App's dependencies, including test
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroidVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.rxBindingVersion"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.rxKotlinVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt 'androidx.lifecycle:lifecycle-compiler:2.5.1'

    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"

    implementation "com.google.code.gson:gson:${rootProject.gsonVersion}"
    implementation "com.squareup.okhttp3:okhttp:${rootProject.okHttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.okHttpVersion}"
    implementation "com.squareup.retrofit2:retrofit:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.retrofitVersion}"

    implementation 'androidx.room:room-runtime:2.4.3'
    annotationProcessor 'androidx.room:room-compiler:2.4.3'
    kapt 'androidx.room:room-compiler:2.4.3'

    // optional - RxJava support for Room
    implementation 'androidx.room:room-rxjava2:2.4.3'

    // Test helpers
    testImplementation 'androidx.room:room-testing:2.4.3'

    // Dependencies for local unit tests
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.hamcrestVersion"

    // Android Testing Support Library's runner and rules
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'

    // Dependencies for Android unit tests
    androidTestImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
//    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
//    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoAndroidVersion"

    // Espresso UI Testing
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'

    // Resolve conflicts between main and test APK:
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    kaptTest "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    //  resolutionStrategy.force "com.android.support:support-annotations:$rootProject.ext.lib.supportLibraryVersion"
    resolutionStrategy.force "com.google.code.findbugs:jsr305:$rootProject.jsr305Version"
}
repositories {
    mavenCentral()
}

android.applicationVariants.all {
    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}
